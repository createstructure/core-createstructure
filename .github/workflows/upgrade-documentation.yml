name: Upgrade documentation (Wiki + README.md)
on:
  workflow_dispatch:
  push:
    branches-ignore:
      - 'releases/*'

jobs:
  upgrade-documentation:
    runs-on: ubuntu-latest
    environment:
      name: documentation
    steps:
    - name: Initial setup
      run: |
        sudo apt update -y
        sudo pip install BeautifulSoup4
        {
          git clone --recurse-submodules --depth 1 https://$.GITHUB_ACTOR:${{ secrets.GITHUB_TOKEN }}@github.com/$GITHUB_REPOSITORY.wiki.git wiki
        } || {
          mkdir wiki
        }
        git clone --recurse-submodules --depth 1 https://$.GITHUB_ACTOR:${{ secrets.GITHUB_TOKEN }}@github.com/$GITHUB_REPOSITORY.git -b $(echo ${GITHUB_REF#refs/heads/}) repo
        rm -f wiki/*.md
    - name: Home file
      run: |
        cd wiki
        python3 << EOF
        import requests
        import json
        from bs4 import BeautifulSoup
        def web_request(url):
          """ Make a web request and return the response
          """ 
          return requests.get(url, auth=("$GITHUB_ACTOR", "${{ secrets.GITHUB_TOKEN }}")).text
        def get_json():
          """ Returns the json with description
          """
          return json.loads(web_request("$GITHUB_API_URL/repos/$GITHUB_REPOSITORY"))
        def get_social_img():
          """ Get social image
          """
          try:
            soup = BeautifulSoup(web_request("$GITHUB_SERVER_URL/$GITHUB_REPOSITORY"), 'html.parser')
            return soup.find("meta", property="og:image")["content"]
          except:
            print("Error getting social image")
            return ""
        def get_content():
          """ Returns the file content
          """
          social_img = get_social_img()
          file_content = "## :octocat: Description :octocat:\n"
          file_content += get_json()["description"].replace(". ", ".\n\n").replace("wiki", "[wiki]($GITHUB_SERVER_URL/$GITHUB_REPOSITORY/wiki)") + "\n"
          file_content += f"![$GITHUB_REPOSITORY]({social_img})\n"
          return file_content
        if __name__ == "__main__":
          open("Home.md", "w+").write(str(get_content()))                    
        EOF
    - name: CHANGELOG file
      run: |
        cp repo/docs/CHANGELOG.md wiki/
        cd wiki
        sed -i 's/Changelog/:octocat: Changelog :octocat:/g' CHANGELOG.md
        sed -i 's/# /## /g' CHANGELOG.md
    - name: Directory structure file
      run: |
        cd wiki
        sudo apt install tree -y
        echo "## :octocat: Directory structure :octocat:" > Directory-Structure.md
        echo "" >> Directory-Structure.md
        echo "\`\`\`" >> Directory-Structure.md
        tree ../repo >> Directory-Structure.md
        echo "\`\`\`" >> Directory-Structure.md
        sed -i 's/bin/bin # source code/g' Directory-Structure.md
        sed -i 's/docs/docs # documentation/g' Directory-Structure.md
    - name: Rebuild the core-createstructure locally
      run: |
        cd wiki
        echo "## :octocat: Rebuild the core-createstructure locally :octocat:" >> Rebuild-the-core-createstructure-locally.md
        echo "Install the core-createstructure locally permits you to do some debug and try new configurations." >> Rebuild-the-core-createstructure-locally.md
        echo "" >> Rebuild-the-core-createstructure-locally.md
        echo "> ATTENTION" >> Rebuild-the-core-createstructure-locally.md
        echo ">" >> Rebuild-the-core-createstructure-locally.md
        echo "> Some features, like subscription with GitHub marketplace, can't be done with the local configuration." >> Rebuild-the-core-createstructure-locally.md
        echo ">" >> Rebuild-the-core-createstructure-locally.md
        echo "> To do these actions you need to run manually the functions, in the previous example \`CreateUpdateRemoveClient\`" >> Rebuild-the-core-createstructure-locally.md
        echo "" >> Rebuild-the-core-createstructure-locally.md
        echo "### Steps:" >> Rebuild-the-core-createstructure-locally.md
        echo "- [:octocat: Rebuild the core-createstructure locally :octocat:](#octocat-rebuild-the-core-createstructure-locally-octocat)" >> Rebuild-the-core-createstructure-locally.md
        echo "  - [Steps:](#steps)" >> Rebuild-the-core-createstructure-locally.md
        echo "  - [1. Install VirtualBox on the PC](#1-install-virtualbox-on-the-pc)" >> Rebuild-the-core-createstructure-locally.md
        echo "  - [2. Install Ubuntu](#2-install-ubuntu)" >> Rebuild-the-core-createstructure-locally.md
        echo "  - [3. Install dependencies](#3-install-dependencies)" >> Rebuild-the-core-createstructure-locally.md
        echo "  - [4. Build Docker](#4-build-docker)" >> Rebuild-the-core-createstructure-locally.md
        echo "  - [5. Run Docker](#5-run-docker)" >> Rebuild-the-core-createstructure-locally.md
        echo "" >> Rebuild-the-core-createstructure-locally.md
        echo "### 1. Install VirtualBox on the PC" >> Rebuild-the-core-createstructure-locally.md
        echo "For installation we suggest VirtualBox, a tool that allows you to create one or more virtual machines :computer:." >> Rebuild-the-core-createstructure-locally.md
        echo "If any of these crashes, in any case, your PC will not lose data, at most you will have to restart it :smile:." >> Rebuild-the-core-createstructure-locally.md
        echo "" >> Rebuild-the-core-createstructure-locally.md
        echo "To install VirtualBox on your PC you need to:" >> Rebuild-the-core-createstructure-locally.md
        echo "- Get in into the UEFI" >> Rebuild-the-core-createstructure-locally.md
        echo "- Enable the function which name is like \"Virtualization\" (for each UEFI this step is different but similar)" >> Rebuild-the-core-createstructure-locally.md
        echo "- Save the configuration and restart the PC" >> Rebuild-the-core-createstructure-locally.md
        echo "- Go to the [VirtualBox website](https://www.virtualbox.org/)" >> Rebuild-the-core-createstructure-locally.md
        echo "- Press \"Download\"" >> Rebuild-the-core-createstructure-locally.md
        echo "- Run the downloaded file" >> Rebuild-the-core-createstructure-locally.md
        echo "- Follow the installation steps" >> Rebuild-the-core-createstructure-locally.md
        echo "" >> Rebuild-the-core-createstructure-locally.md
        echo "### 2. Install Ubuntu" >> Rebuild-the-core-createstructure-locally.md
        echo "As the OS we suggest to use Ubuntu, because it is lightweight (for RAM and CPU) and it's free." >> Rebuild-the-core-createstructure-locally.md
        echo "" >> Rebuild-the-core-createstructure-locally.md
        echo "To install Ubuntu on VirtualBox you need to:" >> Rebuild-the-core-createstructure-locally.md
        echo "- Download the last LTS version of Ubuntu by the following link: [https://ubuntu.com/download/desktop](https://ubuntu.com/download/desktop)" >> Rebuild-the-core-createstructure-locally.md
        echo "> Now you can continue with the other steps during the download" >> Rebuild-the-core-createstructure-locally.md
        echo "- Open VirtualBox" >> Rebuild-the-core-createstructure-locally.md
        echo "- Press \"New\"" >> Rebuild-the-core-createstructure-locally.md
        echo "- Compile the form" >> Rebuild-the-core-createstructure-locally.md
        echo "    - As name put \"rest-createstructure\"" >> Rebuild-the-core-createstructure-locally.md
        echo "    - As Type: \"Linux\"" >> Rebuild-the-core-createstructure-locally.md
        echo "    - As version: \"Ubuntu (64-bit)\" or \"Ubuntu (32-bit)\"" >> Rebuild-the-core-createstructure-locally.md
        echo "    - Press \"Next >\"" >> Rebuild-the-core-createstructure-locally.md
        echo "- Set the RAM to use for the VirtualMachine, at most half of local RAM and press \"Next >\"" >> Rebuild-the-core-createstructure-locally.md
        echo "- Leave \"Create a virtual hard disk now\" and press \"Create\"" >> Rebuild-the-core-createstructure-locally.md
        echo "- Leave \"VDI ...\" and press \"Next >\"" >> Rebuild-the-core-createstructure-locally.md
        echo "- Leave \"Dynamically allocated\" and press \"Next >\"" >> Rebuild-the-core-createstructure-locally.md
        echo "- Change the hard disk memory, we suggest 16GB and press \"Create\"" >> Rebuild-the-core-createstructure-locally.md
        echo "> Make sure that Ubuntu download is finished before to continue" >> Rebuild-the-core-createstructure-locally.md
        echo "- On the VirtualBox console, selecting the created VM, press \"Start\"" >> Rebuild-the-core-createstructure-locally.md
        echo "- Select as start-up disk Ubuntu, already downloaded" >> Rebuild-the-core-createstructure-locally.md
        echo "    - Press the folder icon" >> Rebuild-the-core-createstructure-locally.md
        echo "    - Press \"Add\", in the top menu" >> Rebuild-the-core-createstructure-locally.md
        echo "    - Select the Ubuntu iso, the file will have a structure like \"ubuntu-version-other_info.iso\"" >> Rebuild-the-core-createstructure-locally.md
        echo "    - Press \"Choose\" and \"Start\"" >> Rebuild-the-core-createstructure-locally.md
        echo "- Follow the install steps (the installation needs some minutes)" >> Rebuild-the-core-createstructure-locally.md
        echo "" >> Rebuild-the-core-createstructure-locally.md
        echo "### 3. Install dependencies" >> Rebuild-the-core-createstructure-locally.md
        echo "Now you have to install lamp (Linux Apache MySQL (DB) PHP) on the VM." >> Rebuild-the-core-createstructure-locally.md
        echo "> We suggest you to open this guide on the virtual machine, so you can copy and paste easlier the following commands. " >> Rebuild-the-core-createstructure-locally.md
        echo "" >> Rebuild-the-core-createstructure-locally.md
        echo "To install Dependes on the Virtual Machine you need to:" >> Rebuild-the-core-createstructure-locally.md
        echo "- On the VM (Virtual Machine) open the terminal (\`Ctrl + Alt + T\`)" >> Rebuild-the-core-createstructure-locally.md
        echo "- On the terminal paste \`sudo apt update; sudo apt install apt-transport-https ca-certificates curl software-properties-common -y; curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -; sudo add-apt-repository \"deb [arch=amd64] https://download.docker.com/linux/ubuntu focal stable\"; sudo apt install docker-ce -y; sudo usermod -aG docker ${USER}; su - ${USER}; git clone --recurse-submodules https://github.com/createstructure/core-createstructure; cd core-createstructure\` and insert password" >> Rebuild-the-core-createstructure-locally.md
        echo "" >> Rebuild-the-core-createstructure-locally.md
        echo "### 4. Build Docker" >> Rebuild-the-core-createstructure-locally.md
        echo "To build the Docker, into terminal and inside \"core-createstructure\" folder type \`docker build -t core .\`" >> Rebuild-the-core-createstructure-locally.md
        echo "" >> Rebuild-the-core-createstructure-locally.md
        echo "### 5. Run Docker" >> Rebuild-the-core-createstructure-locally.md
        echo "To run the builded Docker type : docker run core" >> Rebuild-the-core-createstructure-locally.md
        echo "" >> Rebuild-the-core-createstructure-locally.md
    - name: _Footer file
      run: |
        cd wiki
        echo "---" > _Footer.md
        echo "Made w/ :heart: by Castellani Davide" >> _Footer.md
        echo "" >> _Footer.md
        echo "If you want to contribute you can start with:" >> _Footer.md
        echo "- [Discussion]($GITHUB_SERVER_URL/$GITHUB_REPOSITORY/discussions)" >> _Footer.md
        echo "- [Issue]($GITHUB_SERVER_URL/$GITHUB_REPOSITORY/issues/new)" >> _Footer.md
    - name: _Header file
      run: |
        cd wiki
        echo "# core-createstructure" > _Header.md
        echo "[![GitHub license](https://img.shields.io/badge/license-GNU-green?style=flat)]($GITHUB_SERVER_URL/$GITHUB_REPOSITORY/blob/$(echo ${GITHUB_REF#refs/heads/})/docs/LICENSE)" >> _Header.md
        echo "![Author](https://img.shields.io/badge/author-Castellani%20Davide-green?style=flat)" >> _Header.md
        echo "![sys.platform supported](https://img.shields.io/badge/OS%20platform%20supported-all-blue?style=flat) " >> _Header.md
        echo "" >> _Header.md
    - name: Recreate README.md
      run: |
        cat wiki/_Header.md > repo/docs/README.md
        cat wiki/Home.md >> repo/docs/README.md
        cat wiki/Directory-Structure.md >> repo/docs/README.md
        cat wiki/CHANGELOG.md >> repo/docs/README.md
        cat wiki/Rebuild-the-core-createstructure-locally.md >> repo/docs/README.md
        cat wiki/_Footer.md >> repo/docs/README.md
        sed -i 's/:octocat://g' repo/docs/README.md
    - name: git add & commit & upload wiki
      continue-on-error: true
      run: |
        {
          ls wiki/.git/ > /dev/null
        } && {
          cd wiki
          git config user.name "$GITHUB_ACTOR"
          git config user.email "help@castellanidavide.it"
          git add *
          git commit -m "Upgrade by automatic action"
          git push https://$GITHUB_ACTOR:${{ secrets.GITHUB_TOKEN }}@github.com/$GITHUB_REPOSITORY.wiki.git
        }
    - name: git add & commit & upload repo
      continue-on-error: true
      run: |
        cd repo
        git config user.name "$GITHUB_ACTOR"
        git config user.email "help@castellanidavide.it"
        git add *
        git commit -m "Upgrade by automatic action"
        git push https://$GITHUB_ACTOR:${{ secrets.GITHUB_TOKEN }}@github.com/$GITHUB_REPOSITORY.git
